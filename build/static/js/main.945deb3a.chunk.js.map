{"version":3,"sources":["GameContent/GameTable/Game.js","GameContent/MainInfo.js","App.js","serviceWorker.js","index.js"],"names":["Game","nextProps","this","props","updatehandler","item","count","arr","i","push","Math","floor","random","map","el","key","className","onClick","e","click","console","log","filter","scoreLenhgth","length","updateData","updateHandler","Component","MainInfo","state","timer","initGame","updateGameTable","logToConsole","target","setState","initGameHandler","clearInterval","timerID","setInterval","timerUpdated","finishGameHandler","score","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAsCeA,E,8LAlCWC,GAClB,OAAOC,KAAKC,MAAMC,gB,+BAOlB,IAJM,IACFC,EADC,OAEDC,EAAQ,EACRC,EAAM,GACDC,EAAI,EAAGA,EAAI,GAAIA,IAEnBD,EAAIE,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAIhCP,EAAOE,EAAIM,KAAI,SAACC,EAAGN,EAAED,GAEf,OADFD,IACSQ,EAAK,EAAIP,EAAIC,EAAE,GAAK,EAAE,yBAAKO,IAAKT,EAAOU,UAAU,kBAAuB,yBAAKC,QAAS,SAACC,GAAK,EAAKf,MAAMgB,MAAMD,IAAMH,IAAKT,EAAOU,UAAU,YAAoB,yBAAKD,IAAKT,EAAOU,UAAU,qBAKpMI,QAAQC,IAAIhB,EAAKiB,QAAO,SAAAR,GAAE,MAA0B,WAAtBA,EAAGX,MAAMa,cACtC,IACIO,EADQlB,EAAKiB,QAAO,SAAAR,GAAE,MAA2B,YAAvBA,EAAGX,MAAMa,aAChBQ,OACvB,OACI,yBAAKP,QAAS,WAAQ,EAAKd,MAAMsB,WAAWF,IAAgBnB,cAAeF,KAAKC,MAAMuB,eACrFrB,O,GA5BMsB,aCsEJC,E,2MAlEXC,MAAQ,CACJvB,MAAM,EACNwB,MAAM,EACNC,UAAU,EACVC,iBAAiB,G,EAOrBC,aAAe,SAACf,GACe,YAAvBA,EAAEgB,OAAOlB,WAA2B,EAAKa,MAAME,WAC/C,EAAKI,UAAS,SAACN,GACX,MAAO,CAACvB,MAAOuB,EAAMvB,MAAQ,MAEhCY,EAAEgB,OAAOlB,UAAY,gBACtBI,QAAQC,IAAIH,EAAEgB,OAAOlB,a,EAW7BoB,gBAAiB,WACb,EAAKD,SAAS,CAACJ,UAAU,IAC1BX,QAAQC,IAAI,kBACZgB,cAAc,EAAKC,SACnB,EAAKA,QAAQC,aAAY,WAAS,EAAKC,iBAAkB,KACzD,EAAKL,UAAS,WACb,MAAO,CAACL,MAAM,EAAIxB,MAAM,EAAE0B,iBAAiB,O,EAM/CS,kBAAoB,SAACC,GACjBtB,QAAQC,IAAIqB,GACT,EAAKb,MAAMvB,QAAUoC,EAAM,IAC1BC,MAAM,iCACQ,EAAKd,MAAMC,MAAM,yBACd,EAAKD,MAAMvB,MAAM,GAAG,WACrC+B,cAAc,EAAKC,SACnB,EAAKH,SAAS,CAACJ,UAAU,EAAKC,iBAAiB,M,uFAvCnD,OAAO9B,KAAK2B,MAAME,W,qCAeL7B,KAAKiC,UAAS,SAACN,GAC5B,MAAO,CAACC,MAAOD,EAAMC,MAAQ,Q,+BA8BjC,OACI,6BACA,sCAAW,gCAAS5B,KAAK2B,MAAMC,MAApB,cACX,uCAAY,gCAAS5B,KAAK2B,MAAMvB,QAChC,4BAAQW,QAASf,KAAKkC,iBAAtB,cACA,kBAAC,EAAD,CAAMjB,MAAOjB,KAAK+B,aAAcR,WAAYvB,KAAKuC,kBAAmBrC,cAAeF,KAAK2B,MAAMG,uB,GA5D/EL,aCORiB,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCKc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.945deb3a.chunk.js","sourcesContent":["import React,{Component} from  'react';\r\n\r\nclass Game extends Component {\r\n\r\n    shouldComponentUpdate(nextProps){\r\n        return this.props.updatehandler;\r\n    }\r\n\r\n    render() {\r\n        let item;\r\n        let count = 0;\r\n        let arr = [];\r\n        for (let i = 0; i < 70; i++) {\r\n    \r\n             arr.push(Math.floor(Math.random() * 10));\r\n    \r\n        }\r\n\r\n      item = arr.map((el,i,arr) => {\r\n          count++\r\n            return el < 2 ? arr[i-1] < 4?<div key={count} className='Element-empty'></div>:<div onClick={(e)=>{this.props.click(e)}}  key={count} className='Element'></div>  : <div key={count} className='Element-empty'></div>\r\n        })\r\n\r\n\r\n\r\n       console.log(item.filter(el => el.props.className == 'Element'))\r\n        let score = item.filter(el => el.props.className === 'Element')\r\n        let scoreLenhgth=score.length\r\n        return(\r\n            <div onClick={() => { this.props.updateData(scoreLenhgth)}} updatehandler={this.props.updateHandler} >\r\n            {item}\r\n            </div>\r\n        )\r\n    }\r\n\r\n }\r\n   \r\n   \r\nexport default Game;\r\n\r\n","import React, {Component} from  'react';\r\nimport Game from './GameTable/Game';\r\n\r\n\r\n\r\nclass MainInfo extends Component {\r\n    state = {\r\n        count:0,\r\n        timer:0,\r\n        initGame: false,\r\n        updateGameTable: false\r\n    }\r\n\r\n    shouldComponentUpdate(){\r\n        return this.state.initGame;\r\n    }\r\n\r\n    logToConsole = (e)=> {\r\n        if (e.target.className === 'Element' && this.state.initGame) {\r\n            this.setState((state)=>{\r\n                return {count: state.count + 1}\r\n             });\r\n             e.target.className = 'Element-empty';\r\n            console.log(e.target.className)\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    timerUpdated(){  this.setState((state)=>{\r\n        return {timer: state.timer + 1}\r\n     }); }\r\n\r\n    \r\n    initGameHandler =()=>{\r\n        this.setState({initGame: true})\r\n       console.log('refreshHandler')\r\n       clearInterval(this.timerID)\r\n       this.timerID=setInterval(() => {  this.timerUpdated() }, 1000);\r\n       this.setState(()=>{\r\n        return {timer:0 , count:0,updateGameTable: false}\r\n\r\n\r\n     }); \r\n    }\r\n\r\n    finishGameHandler = (score)=>{\r\n        console.log(score)\r\n        if(this.state.count === score-1) {\r\n            alert('-----GAME OVER-----'+\r\n            'YOUR TIME: '+this.state.timer+' seconds'+\r\n            ' YOUR COUNT: '+(this.state.count+1)+' points');\r\n            clearInterval(this.timerID)\r\n            this.setState({initGame: true,updateGameTable: true})\r\n        }\r\n\r\n     }\r\n\r\nrender(){\r\n\r\n    return(\r\n        <div>\r\n        <p>Timer : <strong>{this.state.timer} seconds </strong></p>\r\n        <p>Counter :<strong>{this.state.count}</strong></p>\r\n        <button onClick={this.initGameHandler}>START GAME</button>\r\n        <Game click={this.logToConsole} updateData={this.finishGameHandler} updatehandler={this.state.updateGameTable}/>\r\n    </div>\r\n    )\r\n}\r\n }\r\n   \r\n   \r\nexport default MainInfo;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport MainInfo from './GameContent/MainInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainInfo />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}